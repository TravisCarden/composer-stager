<?xml version="1.0" encoding="UTF-8"?>

<!-- https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-Ruleset -->
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         name="ComposerStager"
         xsi:noNamespaceSchemaLocation="vendor/squizlabs/php_codesniffer/phpcs.xsd"
>

    <description>Composer Stager</description>

    <arg name="colors"/>
    <arg name="cache" value="var/phpcs/cache.json"/>
    <arg name="parallel" value="10"/>

    <file>src</file>
    <file>tests</file>

    <rule ref="PHPCompatibility"/>
    <config name="testVersion" value="7.3-"/>

    <rule ref="PSR2">
        <exclude name="Generic.Files.LineLength.TooLong"/>
    </rule>

    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
    <rule ref="Generic.Arrays.ArrayIndent"/>
    <rule ref="Generic.PHP.RequireStrictTypes.MissingDeclaration"/>

    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
    <rule ref="Squiz.Arrays.ArrayDeclaration">
        <exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.ValueNotAligned"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.KeyNotAligned"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned"/>
    </rule>
    <rule ref="Squiz.NamingConventions.ValidVariableName.MemberNotCamelCaps"/>
    <rule ref="Squiz.NamingConventions.ValidVariableName.NotCamelCaps"/>
    <rule ref="Squiz.NamingConventions.ValidVariableName.StringNotCamelCaps"/>

    <rule ref="SlevomatCodingStandard">
        <exclude name="SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces.NoEmptyLineAfterOpeningBrace"/>
        <exclude name="SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces.NoEmptyLineBeforeClosingBrace"/>
        <exclude name="SlevomatCodingStandard.Classes.SuperfluousAbstractClassNaming.SuperfluousPrefix"/>
        <exclude name="SlevomatCodingStandard.Classes.SuperfluousExceptionNaming.SuperfluousSuffix"/>
        <exclude name="SlevomatCodingStandard.Classes.SuperfluousInterfaceNaming.SuperfluousSuffix"/>
        <exclude name="SlevomatCodingStandard.Commenting.DisallowOneLinePropertyDocComment.OneLinePropertyComment"/>
        <exclude name="SlevomatCodingStandard.Commenting.RequireOneLineDocComment.MultiLineDocComment"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.JumpStatementsSpacing.IncorrectLinesCountBeforeControlStructure"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.NewWithoutParentheses.UselessParentheses"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.RequireYodaComparison.RequiredYodaComparison"/>
        <exclude name="SlevomatCodingStandard.Functions.RequireTrailingCommaInCall.MissingTrailingComma"/>
        <exclude name="SlevomatCodingStandard.Functions.UnusedParameter.UnusedParameter"/>
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedExceptions.NonFullyQualifiedException"/>
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalConstants.NonFullyQualified"/>
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalFunctions.NonFullyQualified"/>
        <exclude name="SlevomatCodingStandard.Namespaces.UseOnlyWhitelistedNamespaces.NonFullyQualified"/>
        <exclude name="SlevomatCodingStandard.Numbers.RequireNumericLiteralSeparator.RequiredNumericLiteralSeparator"/>
        <exclude name="SlevomatCodingStandard.TypeHints.DisallowMixedTypeHint.DisallowedMixedTypeHint"/>

        <!-- Missing type hint sniffs don't support inherited docs. -->
        <!-- @see https://github.com/slevomat/coding-standard/issues/1341 -->
        <exclude name="SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingAnyTypeHint"/>
        <exclude name="SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingTraversableTypeHintSpecification"/>
        <exclude name="SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingAnyTypeHint"/>

        <!-- This sniff is excluded to allow for @codeCoverageIgnore comments. -->
        <exclude name="SlevomatCodingStandard.Commenting.DisallowCommentAfterCode.DisallowedCommentAfterCode"/>

        <!-- It is not known why this sniff fails. -->
        <exclude name="SlevomatCodingStandard.Files.TypeNameMatchesFileName.NoMatchBetweenTypeNameAndFileName"/>

        <!-- @todo Remove these exclusions once support for PHP 7.3 is dropped. -->
        <exclude name="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceEqualOperator.RequiredNullCoalesceEqualOperator"/>
        <exclude name="SlevomatCodingStandard.Functions.RequireArrowFunction.RequiredArrowFunction"/>
        <exclude name="SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingNativeTypeHint"/>
    </rule>
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireYodaComparison.DisallowYodaComparison"/>
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses.IncorrectlyOrderedUses"/>

    <rule ref="SlevomatCodingStandard.Classes.ClassStructure">
        <properties>
            <property name="enableFinalMethods" value="true"/>
            <property name="groups" type="array">
                <element value="uses"/>
                <element value="public constants"/>
                <element value="protected constants"/>
                <element value="private constants"/>
                <element value="public properties"/>
                <element value="public static properties"/>
                <element value="protected properties"/>
                <element value="protected static properties"/>
                <element value="private properties"/>
                <element value="private static properties"/>
                <element value="public static final methods"/>
                <element value="public static abstract methods"/>
                <element value="protected static final methods"/>
                <element value="protected static abstract methods"/>
                <element value="public final methods"/>
                <element value="public abstract methods"/>
                <element value="protected final methods"/>
                <element value="protected abstract methods"/>
                <element value="constructor"/>
                <element value="static constructors"/>
                <element value="destructor"/>
                <element value="public static methods"/>
                <element value="public methods"/>
                <element value="protected methods"/>
                <element value="protected static methods"/>
                <element value="private methods"/>
                <element value="private static methods"/>
                <element value="magic methods"/>
            </property>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.Classes.RequireAbstractOrFinal">
        <exclude-pattern>src/Domain/Exception</exclude-pattern>
    </rule>

    <rule ref="SlevomatCodingStandard.Classes.TraitUseSpacing"><properties>
        <property name="linesCountBeforeFirstUseWhenFirstInClass" value="0"/>
    </properties></rule>

    <rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing"><properties>
        <property name="annotationsGroups" type="array">
            <element value="@coversDefaultClass"/>
            <element value="@covers,@coversNothing"/>
            <element value="@uses"/>
            <element value="@dataProvider"/>
            <element value="@var"/>
            <element value="@param"/>
            <element value="@return"/>
            <element value="@throws"/>
            <element value="@see"/>
            <element value="@todo"/>
            <element value="@noinspection"/>
        </property>
        <property name="linesCountBetweenDifferentAnnotationsTypes" value="1"/>
    </properties></rule>

    <rule ref="SlevomatCodingStandard.Files.FunctionLength"><properties>
        <!-- @todo It would be nice to reduce this. -->
        <property name="maxLinesLength" value="50"/>
    </properties></rule>

    <rule ref="SlevomatCodingStandard.Functions.FunctionLength"><properties>
        <!-- @todo It would be nice to reduce this. -->
        <property name="maxLinesLength" value="50"/>
    </properties></rule>

    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes"><properties>
        <property name="declareOnFirstLine" value="true"/>
        <property name="spacesCountAroundEqualsSign" value="0"/>
    </properties></rule>

    <!-- Exclusions for test classes. -->
    <rule ref="SlevomatCodingStandard.Classes.ClassStructure.IncorrectGroupOrder"><exclude-pattern>tests</exclude-pattern></rule>
    <rule ref="SlevomatCodingStandard.Classes.ForbiddenPublicProperty.ForbiddenPublicProperty"><exclude-pattern>tests</exclude-pattern></rule>
    <rule ref="SlevomatCodingStandard.Classes.RequireAbstractOrFinal"><exclude-pattern>tests</exclude-pattern></rule>
    <rule ref="SlevomatCodingStandard.Files.FunctionLength.FunctionLength"><exclude-pattern>tests</exclude-pattern></rule>
    <rule ref="SlevomatCodingStandard.Files.LineLength.LineTooLong"><exclude-pattern>tests</exclude-pattern></rule>
    <rule ref="SlevomatCodingStandard.Functions.FunctionLength"><exclude-pattern>tests</exclude-pattern></rule>
    <rule ref="SlevomatCodingStandard.Functions.RequireMultiLineCall.RequiredMultiLineCall"><exclude-pattern>tests</exclude-pattern></rule>
    <rule ref="SlevomatCodingStandard.Functions.UnusedParameter"><exclude-pattern>tests</exclude-pattern></rule>
    <rule ref="SlevomatCodingStandard.PHP.DisallowReference.DisallowedAssigningByReference"><exclude-pattern>tests</exclude-pattern></rule>
    <rule ref="SlevomatCodingStandard.PHP.RequireExplicitAssertion.RequiredExplicitAssertion"><exclude-pattern>tests</exclude-pattern></rule>
    <rule ref="SlevomatCodingStandard.TypeHints"><exclude-pattern>tests</exclude-pattern></rule>

</ruleset>
