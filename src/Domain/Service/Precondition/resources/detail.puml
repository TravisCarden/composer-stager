@startuml

' This is the PlantUML (https://plantuml.com/) source used to generate the UML
' detail view diagram of the precondition system (detail.png). Said diagram can
' be regenerated from this source at https://plantuml-editor.kkeisuke.com/ or with
' the PhpStorm plugin at https://plugins.jetbrains.com/plugin/7017-plantuml-integration.
' Optimize it with ImageOptim: https://imageoptim.com/.

!include settings.puml

namespace Exception {

    class PreconditionException <<RuntimeException>> {
        PreconditionInterface $precondition
        +getPrecondition() : PreconditionInterface
    }

}

namespace Precondition {

    interface PreconditionInterface {
        +getName() : string
        +getDescription() : string
        +getStatusMessage($activeDir, $stagingDir) : string
        +isFulfilled($activeDir, $stagingDir) : bool
        +assertIsFulfilled($activeDir, $stagingDir) : void
        +getLeaves() : PreconditionInterface[]
    }

    abstract class AbstractPrecondition implements PreconditionInterface {
        +final getStatusMessage($activeDir, $stagingDir) : string
        +final assertIsFulfilled($activeDir, $stagingDir) : void
        +final getLeaves() : PreconditionInterface[self]
        {abstract} #getFulfilledStatusMessage() : string
        {abstract} #getUnfulfilledStatusMessage() : string
    }

    class ConcretePrecondition extends AbstractPrecondition {
        +getName() : string
        +getDescription() : string
        +isFulfilled($activeDir, $stagingDir) : bool
        #getFulfilledStatusMessage() : string
        #getUnfulfilledStatusMessage() : string
    }

    abstract AbstractPreconditionsTree implements PreconditionInterface {
        -PreconditionInterface[] $children
        +__construct(...$children)
        +final getStatusMessage($activeDir, $stagingDir) : string
        +final isFulfilled($activeDir, $stagingDir) : bool
        +final assertIsFulfilled($activeDir, $stagingDir) : void
        +getLeaves() : PreconditionInterface[]
        {abstract} #getFulfilledStatusMessage() : string
        {abstract} #getUnfulfilledStatusMessage() : string
    }

    class ConcretePreconditionsTree extends AbstractPreconditionsTree {
        +__construct(...$children)
        +getName() : string
        +getDescription() : string
        #getFulfilledStatusMessage() : string
        #getUnfulfilledStatusMessage() : string
    }

}

Exception.PreconditionException -down-o "1  " Precondition.PreconditionInterface
Precondition.PreconditionInterface -up-o "0..*" Precondition.PreconditionInterface : children

@enduml
