# https://phpstan.org/config-reference
parametersSchema:
    gitattributesExportInclude: listOf(string())
    preconditionSystemHash: string()
    translationSystemHash: string()

parameters:
    exceptions:
        check:
            missingCheckedExceptionInThrows: true
            tooWideThrowType: true
    level: max
    tmpDir: var/phpstan
    paths:
        - .gitattributes
        - src
        - tests
    treatPhpDocTypesAsCertain: false
    checkGenericClassInNonGenericObjectType: false
    preconditionSystemHash: d08bbc14bb79b2eb022fd14ce667f540
    translationSystemHash: 716dd12c41171e99b6ecc9d940e76697
    gitattributesExportInclude:
        - composer.json
        - docs
        - LICENSE
        - src
    ignoreErrors:
        # Production code.
        -
            message: '#Built-in or third party exception "\\InvalidArgumentException" cannot be thrown from public methods.*#'
            path: src/Internal/Translation/Service/SymfonyTranslatorProxy.php
        -
            message: '#Call to function assert\(\) with false and string will always evaluate to false.#'
            paths:
                - src/Internal/Translation/Service/Translator.php
                - src/Internal/Translation/Value/TranslationParameters.php
        -
            message: '#Cannot access offset .(application|name). on mixed.#'
            path: src/Internal/Precondition/Service/ComposerIsAvailable.php
        -
            message: '#In method ".*", caught "Throwable" must be rethrown.*#'
            path: src/Internal/Translation/Service/Translator.php
        -
            message: '#Method .*SymfonyTranslatorProxy::trans\(\) has parameter \$parameters with no value type specified in iterable type array.*#'
            path: src/Internal/Translation/Service/SymfonyTranslatorProxy.php
        -
            message: '#.*PreconditionException::__construct\(\) does not call parent constructor from Exception.#'
            path: src/API/Exception/PreconditionException.php
        -
            message: '#Method (run|create)\(\) should not be public because it doesn''t implement a method on an interface.#'
            paths:
                - src/Internal/Process/Service/AbstractProcessRunner.php
                - src/Internal/Translation/Service/Translator.php

        # Test code.
        -
            message: '#.*::__construct\(\) does not call parent constructor from .*.#'
            path: tests/Translation/Value/TestTranslatableExceptionMessage.php
        -
            message: '#Access to an undefined property.*#'
            path: tests
        -
            message: '#Call to an undefined method .*Prophecy.*::.*\(\).#'
            path: tests
        -
            message: '#Cannot call .*TranslatableFactory::create.*\(\) directly.*#'
            path: tests
        -
            message: '#Cannot call method .*\(\) on .*MethodProphecy\|.*.#'
            path: tests
        -
            message: '#Cannot instantiate .*\\.*tableMessage directly.*#'
            path: tests
        -
            message: '#Concrete class must implement an interface#'
            path: tests
        -
            message: '#.*caught .* must be rethrown.*#'
            path: tests
        -
            message: '#Method .* no (value )?type specified.*#'
            path: tests
        -
            message: '#Method .* should not be public because it doesn''t implement a method on an interface.#'
            path: tests
        -
            message: '#Method .* throws checked exception .* but it''s missing from the PHPDoc @throws tag.#'
            path: tests
        -
            message: '#Parameter .* of (static )?method .* expects .* given.#'
            path: tests
        -
            message: '#Property .* does not accept .*.#'
            path: tests

# https://phpstan.org/developing-extensions/extension-types
rules:
    - PhpTuf\ComposerStager\PHPStan\Rules\Calls\NoCallingTranslatableFactoryDirectlyRule # Forbids calling TranslatableFactory::create() directly.
    - PhpTuf\ComposerStager\PHPStan\Rules\Calls\NoInstantiatingTranslatableDirectlyRule # Forbids instantiating translatables directly.
    - PhpTuf\ComposerStager\PHPStan\Rules\Classes\FinalExceptionRule # Forbids exceptions from being final.
    - PhpTuf\ComposerStager\PHPStan\Rules\Classes\MissingExceptionInterfaceRule # Requires exceptions to implement ExceptionInterface.
    - PhpTuf\ComposerStager\PHPStan\Rules\Classes\MissingInterfaceRule # Requires concrete classes to implement an interface.
    - PhpTuf\ComposerStager\PHPStan\Rules\Classes\WrongExceptionNamespaceRule # Requires exceptions to be in the correct namespace.
    - PhpTuf\ComposerStager\PHPStan\Rules\Interfaces\UselessInterfaceRule # Forbids empty interfaces, i.e., without methods or constants.
    - PhpTuf\ComposerStager\PHPStan\Rules\Methods\ForbiddenConcreteTypeHintRule # Forbids using concrete classes in type hints when an interface is available.
    - PhpTuf\ComposerStager\PHPStan\Rules\Methods\ForbiddenThrowsRule # Forbids throwing third party exceptions from public methods.
    - PhpTuf\ComposerStager\PHPStan\Rules\Methods\NoNonInterfacePublicMethodsRule # Forbids public methods that are not on an interface.
    - PhpTuf\ComposerStager\PHPStan\Rules\PhpDoc\CoverageAnnotationHasNoParenthesesRule # Ensures that coverage annotations have no trailing parentheses.
    - PhpTuf\ComposerStager\PHPStan\Rules\PhpDoc\PackageAnnotationRule # Enforces "@package" class annotation rules.
    - PhpTuf\ComposerStager\PHPStan\Rules\PhpDoc\PropertyDataTypePutsObjectProphecyLastRule # Requires "@property" data types to put ObjectProphecy last.
    - PhpTuf\ComposerStager\PHPStan\Rules\PhpDoc\TranslatablePhpDocRule # Ensures that the docblockss for TranslatableMessage creation methods stay in sync.
    - PhpTuf\ComposerStager\PHPStan\Rules\PhpDoc\TranslationParametersPhpDocRule # Ensures that the docblockss for TranslationParameters creation methods stay in sync.

services:
    -
        # Ensures that precondition system diagrams stay current.
        class: PhpTuf\ComposerStager\PHPStan\Rules\Interfaces\PreconditionDiagramsInSyncRule
        arguments:
            preconditionSystemHash: %preconditionSystemHash%
        tags:
            - phpstan.rules.rule
    -
        # Ensures that translation system diagrams stay current.
        class: PhpTuf\ComposerStager\PHPStan\Rules\Interfaces\TranslationDiagramsInSyncRule
        arguments:
            preconditionSystemHash: %translationSystemHash%
        tags:
            - phpstan.rules.rule
    -
        # Ensures that a conscious decision is made about whether to include new repository root paths in Git archive files.
        class: PhpTuf\ComposerStager\PHPStan\Rules\Files\GitattributesMissingExportIgnoreRule
        arguments:
            gitattributesExportInclude: %gitattributesExportInclude%
        tags:
            - phpstan.rules.rule
